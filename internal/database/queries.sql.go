// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package database

import (
	"context"
)

const getUserInChat = `-- name: GetUserInChat :one
select users.id, users.nickname, chats.chat_name from users
join user_chat on users.id = user_chat.user_id
join chats on chats.id = user_chat.chat_id
where chats.id = $1 and users.id = $2
`

type GetUserInChatParams struct {
	ID   int32
	ID_2 int32
}

type GetUserInChatRow struct {
	ID       int32
	Nickname string
	ChatName string
}

func (q *Queries) GetUserInChat(ctx context.Context, arg GetUserInChatParams) (GetUserInChatRow, error) {
	row := q.db.QueryRowContext(ctx, getUserInChat, arg.ID, arg.ID_2)
	var i GetUserInChatRow
	err := row.Scan(&i.ID, &i.Nickname, &i.ChatName)
	return i, err
}

const getUsersInChatById = `-- name: GetUsersInChatById :many
select users.id, users.nickname from users
join user_chat on user_chat.user_id = users.id
where user_chat.chat_id = $1
`

type GetUsersInChatByIdRow struct {
	ID       int32
	Nickname string
}

func (q *Queries) GetUsersInChatById(ctx context.Context, chatID int32) ([]GetUsersInChatByIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersInChatById, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersInChatByIdRow
	for rows.Next() {
		var i GetUsersInChatByIdRow
		if err := rows.Scan(&i.ID, &i.Nickname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
