// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: create_message.sql

package database

import (
	"context"
	"time"
)

const createImageMessage = `-- name: CreateImageMessage :one
INSERT INTO image_message(message_id,data_url) VALUES($1 , $2)
RETURNING id, message_id, data_url
`

type CreateImageMessageParams struct {
	MessageID int32
	DataUrl   string
}

func (q *Queries) CreateImageMessage(ctx context.Context, arg CreateImageMessageParams) (ImageMessage, error) {
	row := q.db.QueryRowContext(ctx, createImageMessage, arg.MessageID, arg.DataUrl)
	var i ImageMessage
	err := row.Scan(&i.ID, &i.MessageID, &i.DataUrl)
	return i, err
}

const createMediaMessage = `-- name: CreateMediaMessage :one
INSERT INTO media_message(message_id,data_url) VALUES($1 , $2)
RETURNING id, message_id, data_url
`

type CreateMediaMessageParams struct {
	MessageID int32
	DataUrl   string
}

func (q *Queries) CreateMediaMessage(ctx context.Context, arg CreateMediaMessageParams) (MediaMessage, error) {
	row := q.db.QueryRowContext(ctx, createMediaMessage, arg.MessageID, arg.DataUrl)
	var i MediaMessage
	err := row.Scan(&i.ID, &i.MessageID, &i.DataUrl)
	return i, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages(chat_id,user_id,created_at) VALUES($1,$2,$3)
RETURNING messages.id
`

type CreateMessageParams struct {
	ChatID    int32
	UserID    int32
	CreatedAt time.Time
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.ChatID, arg.UserID, arg.CreatedAt)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createTextMessage = `-- name: CreateTextMessage :one
INSERT INTO text_message(message_id,data) VALUES($1 , $2)
RETURNING id, message_id, data
`

type CreateTextMessageParams struct {
	MessageID int32
	Data      string
}

func (q *Queries) CreateTextMessage(ctx context.Context, arg CreateTextMessageParams) (TextMessage, error) {
	row := q.db.QueryRowContext(ctx, createTextMessage, arg.MessageID, arg.Data)
	var i TextMessage
	err := row.Scan(&i.ID, &i.MessageID, &i.Data)
	return i, err
}
